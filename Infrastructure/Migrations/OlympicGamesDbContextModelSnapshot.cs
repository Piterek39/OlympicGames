// <auto-generated />
using System;
using Infrastructure.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(OlympicGamesDbContext))]
    partial class OlympicGamesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CityName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("city_name");

                    b.HasKey("Id")
                        .HasName("PK__city__3213E83F6A6B0D91");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("Core.Models.CompetitorEvent", b =>
                {
                    b.Property<int?>("CompetitorId")
                        .HasColumnType("int")
                        .HasColumnName("competitor_id");

                    b.Property<int?>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<int?>("MedalId")
                        .HasColumnType("int")
                        .HasColumnName("medal_id");

                    b.HasIndex("CompetitorId");

                    b.HasIndex("EventId");

                    b.HasIndex("MedalId");

                    b.ToTable("competitor_event", (string)null);
                });

            modelBuilder.Entity("Core.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("EventName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("event_name");

                    b.Property<int?>("SportId")
                        .HasColumnType("int")
                        .HasColumnName("sport_id");

                    b.HasKey("Id")
                        .HasName("PK__event__3213E83F4E0F25C5");

                    b.HasIndex("SportId");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("Core.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("GamesName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("games_name");

                    b.Property<int?>("GamesYear")
                        .HasColumnType("int")
                        .HasColumnName("games_year");

                    b.Property<string>("Season")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("season");

                    b.HasKey("Id")
                        .HasName("PK__games__3213E83F15CE5477");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("Core.Models.GamesCity", b =>
                {
                    b.Property<int?>("CityId")
                        .HasColumnType("int")
                        .HasColumnName("city_id");

                    b.Property<int?>("GamesId")
                        .HasColumnType("int")
                        .HasColumnName("games_id");

                    b.HasIndex("CityId");

                    b.HasIndex("GamesId");

                    b.ToTable("games_city", (string)null);
                });

            modelBuilder.Entity("Core.Models.GamesCompetitor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("Age")
                        .HasColumnType("int")
                        .HasColumnName("age");

                    b.Property<int?>("GamesId")
                        .HasColumnType("int")
                        .HasColumnName("games_id");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.HasKey("Id")
                        .HasName("PK__games_co__3213E83F60C2888A");

                    b.HasIndex("GamesId");

                    b.HasIndex("PersonId");

                    b.ToTable("games_competitor", (string)null);
                });

            modelBuilder.Entity("Core.Models.Medal", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("MedalName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("medal_name");

                    b.HasKey("Id")
                        .HasName("PK__medal__3213E83F8DDD07AC");

                    b.ToTable("medal", (string)null);
                });

            modelBuilder.Entity("Core.Models.NocRegion", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Noc")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("noc");

                    b.Property<string>("RegionName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("region_name");

                    b.HasKey("Id")
                        .HasName("PK__noc_regi__3213E83F69C441D7");

                    b.ToTable("noc_region", (string)null);
                });

            modelBuilder.Entity("Core.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("FullName")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("full_name");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<int?>("Height")
                        .HasColumnType("int")
                        .HasColumnName("height");

                    b.Property<int?>("Weight")
                        .HasColumnType("int")
                        .HasColumnName("weight");

                    b.HasKey("Id")
                        .HasName("PK__person__3213E83FB1E5042F");

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("Core.Models.PersonRegion", b =>
                {
                    b.Property<int?>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("region_id");

                    b.HasIndex("PersonId");

                    b.HasIndex("RegionId");

                    b.ToTable("person_region", (string)null);
                });

            modelBuilder.Entity("Core.Models.Sport", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("SportName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("sport_name");

                    b.HasKey("Id")
                        .HasName("PK__sport__3213E83FFB827D10");

                    b.ToTable("sport", (string)null);
                });

            modelBuilder.Entity("Core.Models.CompetitorEvent", b =>
                {
                    b.HasOne("Core.Models.GamesCompetitor", "Competitor")
                        .WithMany()
                        .HasForeignKey("CompetitorId")
                        .HasConstraintName("fk_ce_com");

                    b.HasOne("Core.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .HasConstraintName("fk_ce_ev");

                    b.HasOne("Core.Models.Medal", "Medal")
                        .WithMany()
                        .HasForeignKey("MedalId")
                        .HasConstraintName("fk_ce_med");

                    b.Navigation("Competitor");

                    b.Navigation("Event");

                    b.Navigation("Medal");
                });

            modelBuilder.Entity("Core.Models.Event", b =>
                {
                    b.HasOne("Core.Models.Sport", "Sport")
                        .WithMany("Events")
                        .HasForeignKey("SportId")
                        .HasConstraintName("fk_ev_sp");

                    b.Navigation("Sport");
                });

            modelBuilder.Entity("Core.Models.GamesCity", b =>
                {
                    b.HasOne("Core.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_gci_city");

                    b.HasOne("Core.Models.Game", "Games")
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .HasConstraintName("fk_gci_gam");

                    b.Navigation("City");

                    b.Navigation("Games");
                });

            modelBuilder.Entity("Core.Models.GamesCompetitor", b =>
                {
                    b.HasOne("Core.Models.Game", "Games")
                        .WithMany("GamesCompetitors")
                        .HasForeignKey("GamesId")
                        .HasConstraintName("fk_gc_gam");

                    b.HasOne("Core.Models.Person", "Person")
                        .WithMany("GamesCompetitors")
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_gc_per");

                    b.Navigation("Games");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Core.Models.PersonRegion", b =>
                {
                    b.HasOne("Core.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .HasConstraintName("fk_per_per");

                    b.HasOne("Core.Models.NocRegion", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_per_reg");

                    b.Navigation("Person");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Core.Models.Game", b =>
                {
                    b.Navigation("GamesCompetitors");
                });

            modelBuilder.Entity("Core.Models.Person", b =>
                {
                    b.Navigation("GamesCompetitors");
                });

            modelBuilder.Entity("Core.Models.Sport", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
